{"version":3,"sources":["components/RestaurantDisplay.js","components/Randomizer.js","App.js","reportWebVitals.js","index.js"],"names":["RestaurantDisplay","props","restaurant","setDoRerollSide","randomize","side","index","setOptions","useState","localVisited","setLocalVisited","name","undefined","oldRestaurantName","setOldRestaurantName","useEffect","rerollMe","filter","ans","Card","className","variant","CardHeader","title","CardContent","genre","CardActions","Button","color","onClick","disabled","old","visited","dummyOptions","Randomizer","options","selected","setSelected","randomizerArray","setRandomizerArray","doRerollSide","rollCount","setRollCount","filterNew","setFilterNew","filterGenre","setFilterGenre","JSON","parse","localStorage","getItem","console","log","setItem","stringify","newArr","possibleOptions","map","x","doFilterNew","includes","forEach","i","push","setTimeout","ran2","ran1","Math","floor","random","length","Typography","FormControl","InputLabel","Select","value","onChange","e","target","MenuItem","val","self","indexOf","gen","bind","this","component","type","hidden","files","text","then","newOptions","split","item","line","filtered","some","oldR","newR","App","titleTypographyProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9c4c43.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardActions, Button } from \"@material-ui/core\";\r\nimport './RestaurantDisplay.css';\r\n\r\nfunction RestaurantDisplay (props) {\r\n    const { restaurant, setDoRerollSide, randomize, side, index, setOptions } = props;\r\n\r\n    const [localVisited, setLocalVisited] = useState(false);\r\n    const [oldRestaurantName, setOldRestaurantName] = useState(restaurant ? restaurant.name : undefined);\r\n\r\n    useEffect(() => {\r\n        if (localVisited && restaurant && restaurant.name !== oldRestaurantName) {\r\n            setLocalVisited(false);\r\n            setOldRestaurantName(restaurant.name);\r\n        }\r\n        else if (restaurant && restaurant.name !== oldRestaurantName) {\r\n            setOldRestaurantName(restaurant.name);\r\n        }\r\n    }, [restaurant]);\r\n\r\n    const rerollMe = (filter) => {\r\n        let ans = [false, false];\r\n        ans[side] = true;\r\n        setDoRerollSide(ans);\r\n        randomize(filter);\r\n    };\r\n\r\n    return (\r\n        <Card className={\"restaurant-card\"} variant={\"outlined\"}>\r\n            <CardHeader title={restaurant ? restaurant.name : \"To Be Decided\"} />\r\n            <CardContent>\r\n                {restaurant ? restaurant.genre : \"\"}\r\n            </CardContent>\r\n            {restaurant ? <CardActions>\r\n                <Button variant={\"outlined\"} color={\"primary\"} onClick={() => rerollMe()}>\r\n                    Re-roll\r\n                </Button>\r\n                <Button variant={\"outlined\"} color={\"primary\"} onClick={() => rerollMe(restaurant.genre)}>\r\n                    Same Genre Re-roll\r\n                </Button>\r\n                {!localVisited ? (\r\n                    <Button variant={\"outlined\"} color={\"primary\"} onClick={() => {\r\n                        setOptions(old => {\r\n                            let ans = [...old];\r\n                            ans[index] = {\r\n                                ...old[index],\r\n                                visited: old[index].visited + 1,\r\n                            };\r\n                            return ans;\r\n                        });\r\n                        setLocalVisited(true);\r\n                    }}>\r\n                        Choose Me\r\n                    </Button>\r\n                ) : (\r\n                    <Button disabled variant={\"outlined\"} color={\"primary\"}>\r\n                        Chosen :)\r\n                    </Button>\r\n                )}\r\n            </CardActions> : null}\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default RestaurantDisplay;","import { useState, useEffect } from \"react\";\r\nimport { Typography, Button, FormControl, Select, MenuItem, InputLabel } from \"@material-ui/core\";\r\nimport './Randomizer.css';\r\nimport RestaurantDisplay from \"./RestaurantDisplay\";\r\n\r\nconst dummyOptions = [\r\n    {\r\n        name: 'Restaurant 1',\r\n        genre: 'Italian',\r\n        visited: 0,\r\n    },\r\n    {\r\n        name: 'Restaurant 2',\r\n        genre: 'French',\r\n        visited: 0,\r\n    },\r\n    {\r\n        name: 'Restaurant 3',\r\n        genre: 'British',\r\n        visited: 0,\r\n    },\r\n    {\r\n        name: 'Restaurant 4',\r\n        genre: 'British',\r\n        visited: 0,\r\n    },\r\n    {\r\n        name: 'Restaurant 5',\r\n        genre: 'British',\r\n        visited: 0,\r\n    },\r\n    {\r\n        name: 'Restaurant 6',\r\n        genre: 'British',\r\n        visited: 0,\r\n    },\r\n];\r\n\r\nfunction Randomizer (props) {\r\n    const [options, setOptions] = useState(dummyOptions);\r\n    const [selected, setSelected] = useState([-1, -1]);\r\n    const [randomizerArray, setRandomizerArray] = useState([]);\r\n    const [doRerollSide, setDoRerollSide]= useState([true, true]);\r\n    const [rollCount, setRollCount] = useState(0);\r\n    // do we want only new places\r\n    //   0 - no filter\r\n    //   1 - prefer new\r\n    //   2 - only new\r\n    const [filterNew, setFilterNew] = useState(0);\r\n    const [filterGenre, setFilterGenre] = useState('');\r\n\r\n    useEffect(() => {\r\n        setOptions(JSON.parse(localStorage.getItem(\"options\")) ? JSON.parse(localStorage.getItem(\"options\")) : dummyOptions);\r\n    }, []);\r\n    useEffect(() => {\r\n        console.log(options);\r\n        localStorage.setItem(\"options\", JSON.stringify(options));\r\n    }, [options]);\r\n\r\n    // init\r\n    const randomize = (filterGenre = \"\", filterNew = 0) => {\r\n        console.log(`randomize(${filterGenre}: ${typeof filterGenre}, ${filterNew}: ${typeof filterNew})`);\r\n        let newArr = [];\r\n        let possibleOptions = options.map((x, index) => [x, index]).filter(x => {\r\n            const [restaurant, index] = x;\r\n            let doFilterNew = (filterNew === 0 || filterNew === 1) || (filterNew === 2 && restaurant.visited === 0);\r\n            return (restaurant.genre.includes(filterGenre) && doFilterNew);\r\n        });\r\n        possibleOptions.forEach(x => {\r\n            const [restaurant, index] = x;\r\n            if (filterNew === 1 && restaurant.visited === 0) {\r\n                for (let i = 0; i < 5; i++) {\r\n                    newArr.push(index);\r\n                }\r\n            }\r\n            else {\r\n                newArr.push(index);\r\n            }\r\n        });\r\n\r\n        setRandomizerArray(newArr);\r\n        setRollCount(50);\r\n    };\r\n    // rolling effect\r\n    useEffect(() => {\r\n        if (rollCount > 0) {\r\n            setTimeout(() => {\r\n                let ran1 = doRerollSide[0] ? randomizerArray[Math.floor(Math.random() * randomizerArray.length)] : selected[0];\r\n                let ran2;\r\n                do {\r\n                    ran2 = doRerollSide[1] ? randomizerArray[Math.floor(Math.random() * randomizerArray.length)] : selected[1];\r\n                } while (ran2 === ran1 && randomizerArray.length > 1);\r\n                setSelected([\r\n                    ran1,\r\n                    ran2,\r\n                ]);\r\n                setRollCount(old => old-1);\r\n            }, 25);\r\n        }\r\n    }, [rollCount]);\r\n\r\n    return (\r\n        <div className={\"randomizer-root\"}>\r\n            <Typography variant={\"h4\"}>\r\n                Restaurant:\r\n            </Typography>\r\n            <div className={'randomizer-filters'}>\r\n                <FormControl>\r\n                    <InputLabel>Genre</InputLabel>\r\n                    <Select\r\n                        value={filterGenre}\r\n                        onChange={e => setFilterGenre(e.target.value)}\r\n                    >\r\n                        <MenuItem value=\"\">None</MenuItem>\r\n                        {options.map(x => x.genre).filter((val, index, self) => {\r\n                            return self.indexOf(val) === index;\r\n                        }).map(gen => (\r\n                            <MenuItem key={gen} value={gen}>{gen}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel>New Places</InputLabel>\r\n                    <Select\r\n                        value={filterNew}\r\n                        onChange={e => setFilterNew(e.target.value)}\r\n                    >\r\n                        <MenuItem value={0}>No Preference</MenuItem>\r\n                        <MenuItem value={1}>Prefer New Places</MenuItem>\r\n                        <MenuItem value={2}>Only New Places</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <div className={'randomizer-wrapper'}>\r\n                <div className={'flex-spacer'} />\r\n                <RestaurantDisplay\r\n                    restaurant={options[selected[0]]}\r\n                    setDoRerollSide={setDoRerollSide.bind(this)}\r\n                    randomize={(filter) => randomize(filter, filterNew)}\r\n                    side={0}\r\n                    index={selected[0]}\r\n                    setOptions={setOptions.bind(this)}\r\n                />\r\n                <div className={'flex-spacer'} />\r\n                <RestaurantDisplay\r\n                    restaurant={options[selected[1]]}\r\n                    setDoRerollSide={setDoRerollSide.bind(this)}\r\n                    randomize={(filter) => randomize(filter, filterNew)}\r\n                    side={1}\r\n                    index={selected[1]}\r\n                    setOptions={setOptions.bind(this)}\r\n                />\r\n                <div className={'flex-spacer'} />\r\n            </div>\r\n            <Button\r\n                variant=\"outlined\"\r\n                component=\"label\"\r\n                color={\"primary\"}\r\n            >\r\n                Upload File\r\n                <input\r\n                    type=\"file\"\r\n                    hidden\r\n                    onChange={e => {\r\n                        const file = e.target.files[0];\r\n                        file.text().then(text => {\r\n                            let lines = text.split(\"\\r\\n\").filter(item => item && item.length > 0);\r\n                            let newOptions = lines.map(line => {\r\n                                const [genreIn, nameIn] = line.split(\",\");\r\n                                return {\r\n                                    genre: genreIn,\r\n                                    name: nameIn,\r\n                                    visited: 0,\r\n                                };\r\n                            });\r\n                            let filtered = newOptions.filter(restaurant => {\r\n                                return !options.some(old => old.name === restaurant.name && old.genre === restaurant.genre);\r\n                            });\r\n                            setOptions(old => [\r\n                                ...(old.filter(oldR => newOptions.some(newR =>\r\n                                    oldR.name === newR.name\r\n                                ))),\r\n                                ...filtered\r\n                            ]);\r\n                        });\r\n                    }}\r\n                />\r\n            </Button>\r\n            <Button onClick={() => randomize(filterGenre, filterNew)} color={\"secondary\"} variant={\"contained\"}>\r\n                Go!\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Randomizer;","import { Card, CardContent, CardHeader } from '@material-ui/core'\nimport './App.css';\nimport Randomizer from \"./components/Randomizer\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <div className={\"flex-spacer\"}></div>\n        <div className={\"app2\"}>\n            <div className={\"flex-spacer\"}></div>\n            <Card className={\"panel\"}>\n                <CardHeader title={\"Restuaurant Picker\"} titleTypographyProps={{variant: 'h3'}} className={\"head\"}>\n                </CardHeader>\n                <CardContent>\n                    <Randomizer />\n                </CardContent>\n            </Card>\n            <div className={\"flex-spacer\"}></div>\n        </div>\n        <div className={\"flex-spacer\"}></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}